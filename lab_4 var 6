#include <iostream>
#include <cmath>
#include <string>

using namespace std;
static const long double PI = 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481;

class Angle {
private:
    int degrees;    // Градусы
    int minutes;    // Минуты

    void normalize();

public:
    Angle();  // Конструктор без аргументов
    Angle(int deg, int min);  // Конструктор инициализации
    Angle(const Angle& other);  // Конструктор копирования

    void read();
    void display() const;
    string toString() const;
    double toRadians() const;
    double getSine() const;

    // Базовые методы
    Angle increase(int deg, int min) const;
    Angle decrease(int deg, int min) const;
    Angle getNormalized() const;
    bool isEqual(const Angle& other) const;
    bool isGreater(const Angle& other) const;
    bool isLess(const Angle& other) const;
    int getDegrees() const;
    int getMinutes() const;

    // Перегруженные операторы
    Angle operator+(const Angle& other) const;
    Angle operator-(const Angle& other) const;
    Angle operator+(int deg) const;
    Angle operator-(int deg) const;
    Angle& operator+=(const Angle& other);
    Angle& operator-=(const Angle& other);
    Angle& operator+=(int deg);
    Angle& operator-=(int deg);
    bool operator==(const Angle& other) const;
    bool operator!=(const Angle& other) const;
    bool operator>(const Angle& other) const;
    bool operator<(const Angle& other) const;
    bool operator>=(const Angle& other) const;
    bool operator<=(const Angle& other) const;
};

void Angle::normalize() {
    degrees += minutes / 60;
    minutes = minutes % 60;

    if (minutes < 0) {
        minutes += 60;
        degrees -= 1;
    }
    degrees = degrees % 360;
    if (degrees < 0) {
        degrees += 360;
    }
}

Angle::Angle() {
    degrees = 0;
    minutes = 0;
}

Angle::Angle(int deg, int min) {
    degrees = deg;
    minutes = min;
    normalize();
}

Angle::Angle(const Angle& other) {
    degrees = other.degrees;
    minutes = other.minutes;
    // normalize() не нужен, так как other уже нормализован
}

void Angle::read() {
    cout << "Введите градусы: ";
    cin >> degrees;
    cout << "Введите минуты: ";
    cin >> minutes;
    normalize();
}

void Angle::display() const {
    cout << degrees << "° " << minutes << "'";
}

string Angle::toString() const {
    return to_string(degrees) + "° " + to_string(minutes) + "'";
}

double Angle::toRadians() const {
    double totalDegrees = degrees + minutes / 60.0;
    return totalDegrees * PI / 180.0;
}

double Angle::getSine() const {
    return sin(toRadians());
}

Angle Angle::increase(int deg, int min) const {
    Angle result;
    result.degrees = degrees + deg;
    result.minutes = minutes + min;
    result.normalize();
    return result;
}

Angle Angle::decrease(int deg, int min) const {
    Angle result;
    result.degrees = degrees - deg;
    result.minutes = minutes - min;
    result.normalize();
    return result;
}

Angle Angle::getNormalized() const {
    Angle result;
    result.degrees = degrees;
    result.minutes = minutes;
    result.normalize();
    return result;
}

bool Angle::isEqual(const Angle& other) const {
    return degrees == other.degrees && minutes == other.minutes;
}

bool Angle::isGreater(const Angle& other) const {
    double total1 = degrees + minutes / 60.0;
    double total2 = other.degrees + other.minutes / 60.0;
    return total1 > total2;
}

bool Angle::isLess(const Angle& other) const {
    double total1 = degrees + minutes / 60.0;
    double total2 = other.degrees + other.minutes / 60.0;
    return total1 < total2;
}

int Angle::getDegrees() const {
    return degrees;
}

int Angle::getMinutes() const {
    return minutes;
}

// Перегруженные операторы
Angle Angle::operator+(const Angle& other) const {
    Angle result;
    result.degrees = degrees + other.degrees;
    result.minutes = minutes + other.minutes;
    result.normalize();
    return result;
}

Angle Angle::operator-(const Angle& other) const {
    Angle result;
    result.degrees = degrees - other.degrees;
    result.minutes = minutes - other.minutes;
    result.normalize();
    return result;
}

Angle Angle::operator+(int deg) const {
    Angle result;
    result.degrees = degrees + deg;
    result.minutes = minutes;
    result.normalize();
    return result;
}

Angle Angle::operator-(int deg) const {
    Angle result;
    result.degrees = degrees - deg;
    result.minutes = minutes;
    result.normalize();
    return result;
}

Angle& Angle::operator+=(const Angle& other) {
    degrees += other.degrees;
    minutes += other.minutes;
    normalize();
    return *this;
}

Angle& Angle::operator-=(const Angle& other) {
    degrees -= other.degrees;
    minutes -= other.minutes;
    normalize();
    return *this;
}

Angle& Angle::operator+=(int deg) {
    degrees += deg;
    normalize();
    return *this;
}

Angle& Angle::operator-=(int deg) {
    degrees -= deg;
    normalize();
    return *this;
}

bool Angle::operator==(const Angle& other) const {
    return degrees == other.degrees && minutes == other.minutes;
}

bool Angle::operator!=(const Angle& other) const {
    return !(*this == other);
}

bool Angle::operator>(const Angle& other) const {
    return isGreater(other);
}

bool Angle::operator<(const Angle& other) const {
    return isLess(other);
}

bool Angle::operator>=(const Angle& other) const {
    return *this > other || *this == other;
}

bool Angle::operator<=(const Angle& other) const {
    return *this < other || *this == other;
}

int main() {
    cout << "Демонстрация работы с углами (с перегруженными операторами)\n\n";

    cout << "1. Создание объектов:\n";
    Angle angle1(45, 30);
    Angle angle2(30, 45);
    Angle angle3(90, 0);

    cout << "Угол 1: " << angle1.toString() << "\n";
    cout << "Угол 2: " << angle2.toString() << "\n";
    cout << "Угол 3: " << angle3.toString() << "\n\n";

    cout << "2. Перегруженные операторы сложения и вычитания:\n";
    Angle sum = angle1 + angle2;
    Angle diff = angle1 - angle2;

    cout << "Угол 1 + Угол 2 = " << sum.toString() << "\n";
    cout << "Угол 1 - Угол 2 = " << diff.toString() << "\n\n";

    cout << "3. Операторы с целыми градусами:\n";
    Angle plus30 = angle1 + 30;
    Angle minus15 = angle1 - 15;

    cout << "Угол 1 + 30° = " << plus30.toString() << "\n";
    cout << "Угол 1 - 15° = " << minus15.toString() << "\n\n";

    cout << "4. Составные операторы присваивания:\n";
    Angle angle4(60, 0);
    cout << "Исходный угол 4: " << angle4.toString() << "\n";

    angle4 += angle1;
    cout << "После angle4 += angle1: " << angle4.toString() << "\n";

    angle4 -= 20;
    cout << "После angle4 -= 20°: " << angle4.toString() << "\n\n";

    cout << "5. Операторы сравнения:\n";
    cout << "Угол 1: " << angle1.toString() << "\n";
    cout << "Угол 2: " << angle2.toString() << "\n";
    cout << "Угол 3: " << angle3.toString() << "\n";

    cout << "Угол 1 == Угол 2: " << (angle1 == angle2 ? "да" : "нет") << "\n";
    cout << "Угол 1 != Угол 2: " << (angle1 != angle2 ? "да" : "нет") << "\n";
    cout << "Угол 1 > Угол 2: " << (angle1 > angle2 ? "да" : "нет") << "\n";
    cout << "Угол 1 < Угол 2: " << (angle1 < angle2 ? "да" : "нет") << "\n";
    cout << "Угол 1 >= Угол 2: " << (angle1 >= angle2 ? "да" : "нет") << "\n";
    cout << "Угол 1 <= Угол 2: " << (angle1 <= angle2 ? "да" : "нет") << "\n\n";

    cout << "6. Комбинированные операции:\n";
    Angle complexAngle = (angle1 + angle2) - 15;
    cout << "(Угол 1 + Угол 2) - 15° = " << complexAngle.toString() << "\n\n";

    cout << "7. Перевод в радианы и синусы:\n";
    cout << "Угол 1 в радианах: " << angle1.toRadians() << "\n";
    cout << "sin(Угол 1) = " << angle1.getSine() << "\n";
    cout << "Угол 3 в радианах: " << angle3.toRadians() << "\n";
    cout << "sin(Угол 3) = " << angle3.getSine() << "\n\n";

    cout << "8. Нормализация экстремальных углов:\n";
    Angle extreme1(400, 75);
    Angle extreme2(-45, -30);
    cout << "Исходный (400, 75): " << extreme1.toString() << "\n";
    cout << "Исходный (-45, -30): " << extreme2.toString() << "\n";

    Angle normalizedSum = extreme1 + extreme2;
    cout << "Их сумма: " << normalizedSum.toString() << "\n";

    return 0;
}
