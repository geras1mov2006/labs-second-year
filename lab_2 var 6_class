#include <iostream>
#include <cmath>
#include <string>

using namespace std;
static const long double PI = 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481;

class Angle {
private:
    int degrees;    // Градусы
    int minutes;    // Минуты

    void normalize();

public:
    Angle();
    void init(int deg = 0, int min = 0);
    void read();
    void display() const;
    string toString() const;
    double toRadians() const;
    double getSine() const;
    Angle increase(int deg, int min) const;
    Angle decrease(int deg, int min) const;
    Angle getNormalized() const;
    bool isEqual(const Angle& other) const;
    bool isGreater(const Angle& other) const;
    bool isLess(const Angle& other) const;
    int getDegrees() const;
    int getMinutes() const;
};

void Angle::normalize() {
    degrees += minutes / 60;
    minutes = minutes % 60;

    if (minutes < 0) {
        minutes += 60;
        degrees -= 1;
    }
    degrees = degrees % 360;
    if (degrees < 0) {
        degrees += 360;
    }
}

Angle::Angle() {
    degrees = 0;
    minutes = 0;
}

void Angle::init(int deg, int min) {
    degrees = deg;
    minutes = min;
    normalize();
}

void Angle::read() {
    cout << "Введите градусы: ";
    cin >> degrees;
    cout << "Введите минуты: ";
    cin >> minutes;
    normalize();
}

void Angle::display() const {
    cout << degrees << "° " << minutes << "'";
}

string Angle::toString() const {
    return to_string(degrees) + "° " + to_string(minutes) + "'";
}

double Angle::toRadians() const {
    double totalDegrees = degrees + minutes / 60.0;
    return totalDegrees * PI / 180.0;
}

double Angle::getSine() const {
    return sin(toRadians());
}

Angle Angle::increase(int deg, int min) const {
    Angle result;
    result.init(degrees + deg, minutes + min);
    return result;
}

Angle Angle::decrease(int deg, int min) const {
    Angle result;
    result.init(degrees - deg, minutes - min);
    return result;
}

Angle Angle::getNormalized() const {
    Angle result;
    result.init(degrees, minutes);
    return result;
}

bool Angle::isEqual(const Angle& other) const {
    return degrees == other.degrees && minutes == other.minutes;
}

bool Angle::isGreater(const Angle& other) const {
    double total1 = degrees + minutes / 60.0;
    double total2 = other.degrees + other.minutes / 60.0;
    return total1 > total2;
}

bool Angle::isLess(const Angle& other) const {
    double total1 = degrees + minutes / 60.0;
    double total2 = other.degrees + other.minutes / 60.0;
    return total1 < total2;
}

int Angle::getDegrees() const {
    return degrees;
}

int Angle::getMinutes() const {
    return minutes;
}

int main() {
    cout << "Демонстрация работы с углами\n\n";

    cout << "1. Инициализация углов:\n";
    Angle angle1;
    angle1.init(45, 30);

    Angle angle2;
    angle2.init(400, 75);

    cout << "Угол 1: ";
    angle1.display();
    cout << "\nУгол 2: ";
    angle2.display();
    cout << "\n\n";


    cout << "2. Ввод угла с клавиатуры:\n";
    Angle angle3;
    angle3.read();
    cout << "Введенный угол: " << angle3.toString() << "\n\n";


    cout << "3. Перевод в радианы:\n";
    cout << "Угол 1 в радианах: " << angle1.toRadians() << "\n";
    cout << "Угол 2 в радианах: " << angle2.toRadians() << "\n\n";


    cout << "4. Синусы углов:\n";
    cout << "sin(угол 1) = " << angle1.getSine() << "\n";
    cout << "sin(угол 2) = " << angle2.getSine() << "\n\n";

    cout << "5. Операции с углами:\n";
    Angle increased = angle1.increase(30, 45);
    Angle decreased = angle1.decrease(10, 15);

    cout << "Угол 1: " << angle1.toString() << "\n";
    cout << "Угол 1 + 30°45': " << increased.toString() << "\n";
    cout << "Угол 1 - 10°15': " << decreased.toString() << "\n\n";

    // Нормализация угла (копии)
    cout << "6. Нормализация угла:\n";
    Angle testAngle;
    testAngle.init(-45, -30);
    cout << "Исходный угол: " << testAngle.toString() << "\n";
    Angle normalized = testAngle.getNormalized();
    cout << "После нормализации: " << normalized.toString() << "\n\n";

    // Сравнение углов
    cout << "7. Сравнение углов:\n";
    cout << "Угол 1: " << angle1.toString() << "\n";
    cout << "Угол 2: " << angle2.toString() << "\n";
    cout << "Углы равны: " << (angle1.isEqual(angle2) ? "да" : "нет") << "\n";
    cout << "Угол 1 > Угол 2: " << (angle1.isGreater(angle2) ? "да" : "нет") << "\n";
    cout << "Угол 1 < Угол 2: " << (angle1.isLess(angle2) ? "да" : "нет") << "\n\n";


    cout << "8. Дополнительные тесты:\n";
    Angle angle4;
    angle4.init(720, 90); // 720°90' = 721°30' = 1°30'
    cout << "720°90' после нормализации: ";
    angle4.display();
    cout << "\n";

    Angle angle5;
    angle5.init(-90, -45); // -90°-45' = -91°15' = 268°45'
    cout << "-90°-45' после нормализации: ";
    angle5.display();
    cout << "\n";

    return 0;
}
